package com.tstool.trackexpenses.utils.base

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.filterIsInstance
import kotlinx.coroutines.flow.receiveAsFlow
import kotlinx.coroutines.launch

abstract class BaseViewModel<UI_STATE, ACTION, EVENT> : ViewModel() {
    abstract fun initUiState(): UI_STATE

    /**
     * UI_STATE ‚Äì Tr·∫°ng th√°i UI
     *
     * üîπ Ch·ª©c nƒÉng:
     *
     * + mutableStateFlow: gi·ªØ tr·∫°ng th√°i UI (UI_STATE) v√† ph√°t t√≠n hi·ªáu khi c√≥ thay ƒë·ªïi.
     * + uiStateFlow: l√† StateFlow gi√∫p UI l·∫Øng nghe li√™n t·ª•c tr·∫°ng th√°i m·ªõi.
     * + uiState: cung c·∫•p gi√° tr·ªã hi·ªán t·∫°i c·ªßa tr·∫°ng th√°i m√† kh√¥ng c·∫ßn l·∫Øng nghe.
     */
    protected val mutableStateFlow = MutableStateFlow(initUiState())
    val uiStateFlow: StateFlow<UI_STATE> = mutableStateFlow
    val uiState: UI_STATE
        get() = uiStateFlow.value


    /**
     * ACTION ‚Äì H√†nh ƒë·ªông t·ª´ UI
     *
     * üîπ Ch·ª©c nƒÉng:
     *
     * + actionSharedFlow: D√πng SharedFlow ƒë·ªÉ ph√°t h√†nh ƒë·ªông t·ª´ UI (b·∫•m n√∫t, nh·∫≠p d·ªØ li·ªáu, ch·ªçn item...).
     * + actionFlow<T>(): B·ªô l·ªçc cho t·ª´ng lo·∫°i h√†nh ƒë·ªông c·ª• th·ªÉ.
     * + dispatch(action): G·ª≠i h√†nh ƒë·ªông v√†o SharedFlow, gi√∫p UI g·ª≠i s·ª± ki·ªán ƒë·∫øn ViewModel.
     */
    val actionSharedFlow = MutableSharedFlow<ACTION>(extraBufferCapacity = 10) // Buffer actions to prevent loss if no collector is active
    inline fun <reified T : ACTION> actionFlow() = actionSharedFlow.filterIsInstance<T>()
    open fun dispatch(action: ACTION): Job = viewModelScope.launch {
        actionSharedFlow.emit(action)
    }

    /**
     * EVENT ‚Äì S·ª± ki·ªán m·ªôt l·∫ßn (One-shot Event)
     * + G·ª≠i c√°c s·ª± ki·ªán. C√°c s·ª± ki·ªán n√†y c√≥ th·ªÉ ƒë∆∞·ª£c l·∫Øng nghe th√¥ng qua eventFlow
     *
     * üîπ Ch·ª©c nƒÉng:
     * + eventChannel l∆∞u tr·ªØ c√°c s·ª± ki·ªán m·ªôt l·∫ßn nh∆∞ Snackbar, Toast, Navigation.
     * + eventFlow chuy·ªÉn ƒë·ªïi Channel th√†nh Flow, gi√∫p UI l·∫Øng nghe s·ª± ki·ªán m·ªõi.
     * + sendEvent(event) g·ª≠i s·ª± ki·ªán v√†o Channel.
     */
    private val eventChannel = Channel<EVENT>(Channel.UNLIMITED)
    val eventFlow = eventChannel.receiveAsFlow()

    fun sendEvent(event: EVENT) = viewModelScope.launch {
        eventChannel.send(event)
    }

    override fun onCleared() {
        super.onCleared()
        eventChannel.close()
    }
}